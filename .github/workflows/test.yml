---
name: python test

on:
  push:
    branches-ignore:
      - "coverage"
      - "renovate/**"
  pull_request:
  workflow_dispatch:
    inputs:
      main_branch:
        description: "Main branch for coverage/tmate."
        type: string
        required: false
        default: "main"
      main_os:
        description: "Main os for coverage/tmate."
        type: choice
        default: "ubuntu-latest"
        options:
          - "ubuntu-latest"
          - "macos-latest"
      main_py_ver:
        description: "Main python version for coverage/tmate."
        type: choice
        default: "3.11"
        options:
          - "3.12"
          - "3.11"
          - "3.10"
          - "3.9"
      main_setup_type:
        description: "Setup type for coverage."
        type: choice
        default: "poetry"
        options:
          - "poetry"
          - "uv"
          - "pip"
      tmate:
        type: boolean
        description: "Run the build with tmate debugging enabled (https://github.com/marketplace/actions/debugging-with-tmate). This is only for main strategy and others will be stopped."
        required: false
        default: false
      head_python_action:
        type: boolean
        description: 'Use the head version of python-action instead of v1'
        required: false
        default: false

env:
  main_branch: ${{ inputs.main_branch || 'main' }}
  main_os: ${{ inputs.main_os || 'ubuntu-latest' }}
  main_py_ver: ${{ inputs.main_py_ver || '3.11' }}
  main_setup_type: ${{ inputs.main_setup_type || 'poetry' }}
  tmate: ${{ inputs.tmate || 'false' }}
  head_python_action: ${{ inputs.head_python_action || 'false' }}

jobs:
  test_matrix:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest,macos-latest]
        python-version: ["3.12","3.11","3.10"]
        setup-type: ["poetry","uv","pip"]
    permissions:
      contents: write
    runs-on: ${{ matrix.os }}
    steps:
      - name: Check is main
        id: is_main
        run: |
          if [ "${{ github.ref }}" = "refs/heads/${{ env.main_branch }}" ] && [ "${{ matrix.os }}" = "${{ env.main_os }}" ] && [ "${{ matrix.python-version }}" = "${{ env.main_py_ver }}" ] && [ "${{ matrix.setup-type }}" = "${{ env.main_setup_type }}" ];then
            echo "is_main=1" >> $GITHUB_ENV
            is_main=1
          else
            echo "is_main=0" >> $GITHUB_ENV
            is_main=0
          fi
          if [ "${{ env.tmate }}" = "true" ];then
            if [ "$is_main" = 0 ];then
              echo "Tmate is enabled and this is not main, skip tests"
              exit 1
            fi
            echo "debug=1" >> $GITHUB_ENV
          else
            echo "debug=0" >> $GITHUB_ENV
          fi
      - name: Set other variables
        run: |
          if [ "${{ matrix.setup-type }}"  != "poetry" ];then
            echo "checkout=0" >> $GITHUB_ENV
          else
            echo "checkout=1" >> $GITHUB_ENV
          fi
      - uses: actions/checkout@v5
        if: ${{ matrix.setup-type != 'poetry' }}
        with:
          persist-credentials: false
          fetch-depth: 0
      - name: Set pyproject.toml for uv
        if: ${{ matrix.setup-type == 'uv' }}
        run: |
          mv pyproject.uv.toml pyproject.toml
      - name: Set pyproject.toml for pip
        if: ${{ matrix.setup-type == 'pip' }}
        run: |
          pipx install poetry
          poetry self add poetry-plugin-export
          poetry export --with dev --without-hashes -f requirements.txt -o requirements.txt
          echo "." >> requirements.txt
      - uses: rcmdnk/python-action@v3
        id: python_action_v
        if: ${{ env.head_python_action == 'false' }}
        with:
          checkout: "${{ env.checkout }}"
          setup-type: "${{ matrix.setup-type }}"
          python-version: "${{ matrix.python-version }}"
          coverage-push: "${{ env.is_main }}"
          coverage-push-condition: "branch=${{ env.main_branch }}, os=${{ env.main_os }}, python_version=${{ env.main_py_ver }}"
          pre-commit: "${{ env.is_main }}"
          tmate: "${{ env.debug }}"
      - uses: rcmdnk/python-action@main
        id: python_action_main
        if: ${{ env.head_python_action == 'true' }}
        with:
          checkout: "${{ env.checkout }}"
          setup-type: "${{ matrix.setup-type }}"
          python-version: "${{ matrix.python-version }}"
          coverage-push: "${{ env.is_main }}"
          coverage-push-condition: "branch=${{ env.main_branch }}, os=${{ env.main_os }}, python_version=${{ env.main_py_ver }}"
          pre-commit: "${{ env.is_main }}"
          tmate: "${{ env.debug }}"
      - name: Test count check
        run: |
          [ "${{  steps.python_action_v.outputs.tests }}" = 5 ] || [ "${{  steps.python_action_main.outputs.tests }}" = 5 ]
  python-ignore:
    runs-on: ubuntu-latest
    steps:
      - name: Exit workflow
        if: ${{ github.event_name == 'workflow_dispatch' && env.tmate == 'true' }}
        run: exit 1
      - uses: rcmdnk/python-action@v3
        id: python_action_v
        if: ${{ env.head_python_action == 'false' }}
        with:
          pytest-ignore: "tests/test_version.py,tests/test_nonexists.py"
          pytest-cov-path: "src"
      - uses: rcmdnk/python-action@main
        if: ${{ env.head_python_action == 'true' }}
        id: python_action_main
        with:
          pytest-ignore: "tests/test_version.py,tests/test_nonexists.py"
          pytest-cov-path: "src"
      - name: Test count check
        run: |
          [ "${{  steps.python_action_v.outputs.tests }}" = 4 ] || [ "${{  steps.python_action_main.outputs.tests }}" = 4 ]
  failure:
    runs-on: ubuntu-latest
    steps:
      - name: Exit workflow
        if: ${{ github.event_name == 'workflow_dispatch' && env.tmate == 'true'}}
        run: exit 1
      - uses: rcmdnk/python-action@v3
        id: python_action_v
        continue-on-error: true
        if: ${{ env.head_python_action == 'false' }}
        with:
          pytest-tests-path: "tests/test_fail.py"
          pytest-cov-path: "src"
      - uses: rcmdnk/python-action@main
        id: python_action_main
        continue-on-error: true
        if: ${{ env.head_python_action == 'true' }}
        with:
          pytest-tests-path: "tests/test_fail.py"
          pytest-cov-path: "src"
      - name: Test count check
        run: |
          [ "${{  steps.python_action_v.outputs.tests }}" = 1 ] || [ "${{  steps.python_action_main.outputs.tests }}" = 1 ]
  benchmark:
    runs-on: ubuntu-latest
    steps:
      - name: Exit workflow
        if: ${{ github.event_name == 'workflow_dispatch' && env.tmate == 'true'}}
        run: exit 1
      - uses: rcmdnk/python-action@v3
        id: python_action_v
        continue-on-error: true
        if: ${{ env.head_python_action == 'false' }}
        with:
          pytest-separate-benchmark: "1"
      - uses: rcmdnk/python-action@main
        id: python_action_main
        continue-on-error: true
        if: ${{ env.head_python_action == 'true' }}
        with:
          pytest-separate-benchmark: "1"
  variable-check:
    runs-on: ubuntu-latest
    steps:
      - name: Exit workflow
        if: ${{ github.event_name == 'workflow_dispatch' && env.tmate == 'true' }}
        run: exit 1
      - name : vars
        run: |
          echo test
          echo $GITHUB_WORKFLOW_REF
          echo $GITHUB_RUN_ID
          echo ${{ github.action }}
          echo ${{ github.action_path }}
          echo ${{ github.action_ref }}
          echo ${{ github.job }}
          echo ${{ github.path }}
          echo ${{ github.run_id }}
          echo ${{ github.run_attempt }}
          echo ${{ job.container.id }}
          echo ${{ job.container.network }}
          echo ${{ env.main_branch }}
          echo ${{ env.main_os }}
          echo ${{ env.main_py_ver }}
          echo ${{ env.tmate }}
          echo ${{ env.head_python_action }}
